// license-header java merge-point
/* Autogenerated on 04/28/2016 01:20:56-0400 by AndroMDA!
 *
 * TEMPLATE:    jaxws\WebServiceMethodImpl.vsl in andromda-webservices-cartridge
 * MODEL CLASS: AndroMDAModel::org.sw.andromda.lastrest::service::SearchService::indexDocument
 * STEREOTYPE:  Service on SearchService
 * STEREOTYPE:  WebService on SearchService
 * STEREOTYPE:  WebServiceOperation on indexDocument
*/
package org.sw.andromda.lastrest.service;

import java.util.Collection;
import java.util.List;
import org.sw.andromda.lastrest.vo.DocumentVO;

/**
 * WebService Service Method Implementation for the SearchService
 * service org.andromda.cartridges.webservice.metafacades.WebServiceOperationLogicImpl[org.sw.andromda.lastrest.service.SearchService.indexDocument].
 * 
 */

public class IndexDocumentImpl
{
    /**
     * Constructor
     */
    public IndexDocumentImpl()
    {
        //Documented empty code block - avoid compiler warning
    }

    /**
     * Delegate for TestCase SearchServiceWSDelegateTest and SearchServiceSEIImplTest
     */
    public static void indexDocumentSetUp()
    {
        // Insert your custom code here for additional required unit test case setup for service method
    }

    /**
     * Delegate for TestCase SearchServiceWSDelegateTest and SearchServiceSEIImplTest
     */
    public static void indexDocumentTearDown()
    {
        // Insert your custom code here for additional required unit test case tear down for service method
    }

   /**
    * Transforms the indexDocument service method parameters on SearchService.
    * 
    * @param documents DocumentVO multiplicity=0..-1
    * Replace void with transformed type, use target.set() values to create transformation
    */
    public static void indexDocumentTransformInput(
        final List<DocumentVO> documents
    )
    {

        if (documents != null && !documents.isEmpty())
        {
            for (DocumentVO documentsElement : documents)
            {
                // property id with 0 properties:
                String id1 = documentsElement.getId();
                if (id1 != null)
                {
                }
                // property name with 0 properties:
                String name2 = documentsElement.getName();
                if (name2 != null)
                {
                }
                // property inStock with 0 properties:
                Boolean inStock3 = documentsElement.getInStock();
                if (inStock3 != null)
                {
                }
                // property price with 0 properties:
                Double price4 = documentsElement.getPrice();
                if (price4 != null)
                {
                }
                // property features with 0 properties:
                Collection<String> features4List = documentsElement.getFeatures();
                if (features4List != null && !features4List.isEmpty())
                {
                    for (String features4 : documentsElement.getFeatures())
                    {
                    }
                }
            }
        }
    }

   /**
    * Transforms input to an output response for indexDocument service method on SearchService.
    * 
    * @return indexDocumentResponse Boolean
    */
    public static Boolean indexDocumentTransformResponse(
        /* Domain response to be transformed to service response */)
        // throws TransformationException?
    {
        // Dummy return value implementation with default values...
        // Iterate down through all complex types and create default dummy constructor and attribute values
        Boolean rtn = Boolean.TRUE;

        return rtn;
    }

    /** Create input test data for SearchService indexDocument
     * Used by webservice WSClient (against service) and core service WSDelegateTest (against implementation).
     * Return wrapped parameters:
     * documents: DocumentVO
     * @return indexDocumentReturn IndexDocument WS Input parameter wrapper (assumes wrapped WSDL)
     **/
    public static IndexDocument indexDocumentCreateInput()
    {
        IndexDocument indexDocumentReturn = new IndexDocument();

        // parameter1 documentsElementParam1 with 5 properties: id name inStock price features
        DocumentVO documentsElementParam1 = new DocumentVO();
        documentsElementParam1.setId("id");
        documentsElementParam1.setName("name");
        documentsElementParam1.setInStock(Boolean.TRUE);
        documentsElementParam1.setPrice(Double.valueOf(1));
        documentsElementParam1.getFeatures().add("features");
        // List<DocumentVO> documentsElementParam1 = new java.util.ArrayList<DocumentVO>();
        indexDocumentReturn.getDocuments().add(documentsElementParam1);

        return indexDocumentReturn;
    }
}